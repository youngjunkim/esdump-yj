#!/usr/bin/env node

// I am a wrapper around basic elastcidump
// I will source all indices from your elasticserach server and dump them out to .json and .mapping.json files
// I probably only work on *nix hosts

var argv        = require('optimist').argv;
var fs          = require('fs');
var util        = require('util');
var request     = require('request');
var fork        = require('child_process').fork;

var defaults = {
  debug:      true,
  parallel:   1,
  match:      '^.*$',
  input:      null,
  output:     null,
  scrollTime: '10m',
  limit:      100,
  offset:     100,
};

var options = {};
var matchedIndexes = [];
var working = 0;
var complete = 0;
var indexCounter = 0;
var sleepTime = 1000;
var workTimeout;

var log = function(type, message){
  if(type === 'debug'){
    if(options.debug === true){
      message = "[debug] | " + message;
    }else{
      return false;
    }
  }else{
    message = (new Date().toUTCString()) + " | " + message;
  }
  console.log(message); 
};

for(var i in defaults){
  options[i] = defaults[i];
  if(argv[i]){ 
    options[i] = argv[i];
  }
  if(options[i] === 'true' ){ options[i] = true; }
  if(options[i] === 'false'){ options[i] = false; }
}

request.get(options.input + '/_aliases', function(err, response){
  if(err){ log('err', err); process.exit(); }
  response = JSON.parse(response.body);
  for(var index in response){
    var matches = index.match(new RegExp(options.match, "i"));
    if(matches){
      matchedIndexes.push(index);
    }
  }

  work();
});

//

var work = function(){
  clearTimeout(workTimeout);
  if(complete == matchedIndexes.length){
    log('debug', ' all done ');
    log('debug', ' bye ');
    process.exit();
  }else if(working == options.parallel){
    setTimeout(work, sleepTime);
  }else{
    dump();
    setTimeout(work, sleepTime);
  }
};

var dump = function(){
  working++;
  var index = matchedIndexes[indexCounter];
  
  if(!index){
    working--;
    return;
  }

  indexCounter++;

  try{
    fs.mkdirSync(options.output);
  }catch(e){}

  var input          = options.input + '/' + index;
  var output_data    = options.output + '/' + index + '.json';
  var output_mapping = options.output + '/' + index + '.mapping.json';
  
  log('debug', "dumping " + input + ' to ' + output_mapping);

  var mapping_child = fork(__dirname + '/elasticdump', [
    '--type='       + 'mapping',
    '--input='      + input,
    '--output='     + output_mapping,
  ]);

  log('debug', "dumping " + input + ' to ' + output_data);

  var data_child = fork(__dirname + '/elasticdump', [
    '--type='       + 'data',
    '--input='      + input,
    '--output='     + output_data,
    '--scrollTime=' + options.scrollTime,
    '--limit='      + options.limit,
    '--offset='     + options.offset,
  ]);

  data_child.on('close', function(){
    log('debug', ' *** complete! ');
    working--;
    complete++;
  });
  
};